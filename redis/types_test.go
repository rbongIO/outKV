package redis

import (
	bitcask "github.com/rbongIO/bitcask-go"
	"github.com/rbongIO/bitcask-go/utils"
	"github.com/stretchr/testify/assert"
	"os"
	"testing"
	"time"
)

func TestNewDataStructureType(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)
	assert.NotNil(t, rds)
	err = rds.Set(utils.GetTestKey(1), 0, utils.GetTestValue(24))
	err = rds.Set(utils.GetTestKey(2), 0, utils.GetTestValue(24))
	err = rds.Set(utils.GetTestKey(3), 10*time.Second, utils.GetTestValue(24))
	assert.Nil(t, err)
	val1, err := rds.Get(utils.GetTestKey(1))
	assert.Nil(t, err)
	assert.NotNil(t, val1)
	t.Log(string(utils.GetTestKey(1)), string(val1))
	val2, err := rds.Get(utils.GetTestKey(2))
	assert.Nil(t, err)
	assert.NotNil(t, val2)
	t.Log(string(utils.GetTestKey(2)), string(val2))
	val3, err := rds.Get(utils.GetTestKey(3))
	assert.Nil(t, err)
	assert.NotNil(t, val3)
	t.Log(string(utils.GetTestKey(3)), string(val3))
	time.Sleep(5 * time.Second)
	val3, err = rds.Get(utils.GetTestKey(3))
	assert.Nil(t, err)
	assert.NotNil(t, val3)
	t.Log(string(utils.GetTestKey(3)), string(val3))
	time.Sleep(6 * time.Second)
	val3, err = rds.Get(utils.GetTestKey(3))
	assert.NotNil(t, err)
	assert.Nil(t, val3)
}

func TestDataStructureType_Delete(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)
	assert.NotNil(t, rds)
	err = rds.Set(utils.GetTestKey(1), 0, utils.GetTestValue(24))
	assert.Nil(t, err)
	val1, err := rds.Get(utils.GetTestKey(1))
	assert.Nil(t, err)
	assert.NotNil(t, val1)
	t.Log(string(utils.GetTestKey(1)), string(val1))
	err = rds.Delete(utils.GetTestKey(1))
	assert.Nil(t, err)
	val1, err = rds.Get(utils.GetTestKey(1))
	assert.NotNil(t, err)
	assert.Nil(t, val1)
	err = rds.Delete(utils.GetTestKey(1))
	assert.Nil(t, err)
}
func TestDataStructureType_Type(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)
	assert.NotNil(t, rds)
	err = rds.Set(utils.GetTestKey(1), 0, utils.GetTestValue(24))
	assert.Nil(t, err)
	val1, err := rds.Get(utils.GetTestKey(1))
	assert.Nil(t, err)
	assert.NotNil(t, val1)
	t.Log(string(utils.GetTestKey(1)), string(val1))
	dtype, err := rds.Type(utils.GetTestKey(1))
	assert.Nil(t, err)
	assert.Equal(t, RString, dtype)
}

func TestDataStructureType_HSet(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis-hash")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)
	assert.NotNil(t, rds)
	key1, filed1, value1 := utils.GetTestKey(99), utils.GetTestKey(99), utils.GetTestValue(24)
	ok, err := rds.HSet(key1, filed1, value1)
	t.Log(ok, err)
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.HSet(key1, filed1, utils.GetTestValue(25))
	t.Log(ok, err)
	assert.Nil(t, err)
	assert.False(t, ok)

	t.Log(string(key1), string(filed1), string(value1))
	val1, err := rds.HGet(key1, filed1)
	assert.Nil(t, err)
	assert.NotNil(t, val1)
	t.Log(string(key1), string(filed1), string(val1))
}
func TestRedisDataStructure_HGet(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis-hget")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)

	ok1, err := rds.HSet(utils.GetTestKey(1), []byte("field1"), utils.RandomValue(100))
	assert.Nil(t, err)
	assert.True(t, ok1)

	v1 := utils.RandomValue(100)
	ok2, err := rds.HSet(utils.GetTestKey(1), []byte("field1"), v1)
	assert.Nil(t, err)
	assert.False(t, ok2)

	v2 := utils.RandomValue(100)
	ok3, err := rds.HSet(utils.GetTestKey(1), []byte("field2"), v2)
	assert.Nil(t, err)
	assert.True(t, ok3)

	val1, err := rds.HGet(utils.GetTestKey(1), []byte("field1"))
	assert.Nil(t, err)
	assert.Equal(t, v1, val1)

	val2, err := rds.HGet(utils.GetTestKey(1), []byte("field2"))
	assert.Nil(t, err)
	assert.Equal(t, v2, val2)

	_, err = rds.HGet(utils.GetTestKey(1), []byte("field-not-exist"))
	assert.Equal(t, bitcask.ErrKeyNotFound, err)
}
func TestRedisDataStructure_HDel(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis-hdel")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)

	del1, err := rds.HDel(utils.GetTestKey(200), nil)
	assert.Nil(t, err)
	assert.False(t, del1)

	ok1, err := rds.HSet(utils.GetTestKey(1), []byte("field1"), utils.GetTestValue(100))
	assert.Nil(t, err)
	assert.True(t, ok1)

	v1 := utils.GetTestValue(100)
	ok2, err := rds.HSet(utils.GetTestKey(1), []byte("field1"), v1)
	assert.Nil(t, err)
	assert.False(t, ok2)

	v2 := utils.GetTestValue(100)
	ok3, err := rds.HSet(utils.GetTestKey(1), []byte("field2"), v2)
	assert.Nil(t, err)
	assert.True(t, ok3)

	del2, err := rds.HDel(utils.GetTestKey(1), []byte("field1"))
	assert.Nil(t, err)
	assert.True(t, del2)
}

func TestDataStructureType_SAdd(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis-set")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)
	assert.NotNil(t, rds)
	key1, members1 := utils.GetTestKey(100), utils.RandomValue(1024)
	ok, err := rds.SAdd(key1, members1)
	assert.Nil(t, err)
	assert.True(t, true)
	ok, err = rds.SAdd(key1, members1)
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.SAdd(key1, []byte("member2"))
	assert.Nil(t, err)
	assert.True(t, ok)
}
func TestDataStructureType_SIsMember(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis-set")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)
	assert.NotNil(t, rds)
	key1, members1 := utils.GetTestKey(100), utils.RandomValue(1024)
	ok, err := rds.SAdd(key1, members1)
	assert.Nil(t, err)
	assert.True(t, true)
	ok, err = rds.SAdd(key1, members1)
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.SAdd(key1, []byte("member2"))
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.SIsMember(key1, members1)
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.SIsMember(key1, []byte("member2"))
	assert.Nil(t, err)
	assert.True(t, ok)
}
func TestDataStructureType_SRem(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis-set")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)
	assert.NotNil(t, rds)
	key1, members1 := utils.GetTestKey(100), utils.RandomValue(1024)
	ok, err := rds.SAdd(key1, members1)
	assert.Nil(t, err)
	assert.True(t, true)
	ok, err = rds.SAdd(key1, members1)
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.SAdd(key1, []byte("member2"))
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.SIsMember(key1, members1)
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.SRem(key1, members1)
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.SRem(key1, members1)
	assert.Nil(t, err)
	assert.False(t, ok)
	ok, err = rds.SIsMember(key1, members1)
	assert.Nil(t, err)
	assert.False(t, ok)
}

func TestDataStructureType_List(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis-list")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)
	assert.NotNil(t, rds)
	key1, members1 := utils.GetTestKey(100), utils.RandomValue(1024)
	_, members2 := utils.GetTestKey(101), utils.RandomValue(1024)
	_, members3 := utils.GetTestKey(102), utils.RandomValue(1024)
	ok, err := rds.LPush(key1, members1)
	assert.Nil(t, err)
	assert.Equal(t, uint32(1), ok)
	ok, err = rds.LPush(key1, members2)
	assert.Nil(t, err)
	assert.Equal(t, uint32(2), ok)
	val1, err := rds.LPop(key1)
	assert.Nil(t, err)
	assert.Equal(t, members2, val1)
	val2, err := rds.LPop(key1)
	assert.Nil(t, err)
	assert.Equal(t, members1, val2)
	val3, err := rds.LPop(key1)
	assert.NotNil(t, err)
	assert.Nil(t, val3)
	ok, err = rds.RPush(key1, members1)
	assert.Nil(t, err)
	assert.Equal(t, uint32(1), ok)
	val1, err = rds.LPop(key1)
	assert.Nil(t, err)
	assert.Equal(t, members1, val1)
	ok, err = rds.LPush(key1, members1)
	assert.Nil(t, err)
	assert.Equal(t, uint32(1), ok)
	val1, err = rds.RPop(key1)
	assert.Nil(t, err)
	assert.Equal(t, members1, val1)
	ok, err = rds.RPush(key1, members1)
	assert.Nil(t, err)
	assert.Equal(t, uint32(1), ok)
	ok, err = rds.LPush(key1, members2)
	assert.Nil(t, err)
	assert.Equal(t, uint32(2), ok)
	ok, err = rds.RPush(key1, members3)
	assert.Nil(t, err)
	assert.Equal(t, uint32(3), ok)
	val1, err = rds.RPop(key1)
	assert.Nil(t, err)
	assert.Equal(t, members3, val1)
	val2, err = rds.RPop(key1)
	assert.Nil(t, err)
	assert.Equal(t, members1, val2)
	val3, err = rds.RPop(key1)
	assert.Nil(t, err)
	assert.Equal(t, members2, val3)

}

func TestDataStructureType_ZAdd(t *testing.T) {
	dir, _ := os.MkdirTemp("", "bitcask-go-redis-zset")
	rds, err := NewDataStructureType(bitcask.WithDirPath(dir))
	assert.Nil(t, err)
	assert.NotNil(t, rds)
	key1, members1 := utils.GetTestKey(100), utils.RandomValue(1024)
	members2, members3 := utils.RandomValue(1024), utils.RandomValue(1024)

	ok, err := rds.ZAdd(key1, 1.0, members1)
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.ZAdd(key1, 1.0, members2)
	assert.Nil(t, err)
	assert.True(t, ok)
	ok, err = rds.ZAdd(key1, 2.0, members3)
	assert.Nil(t, err)
	assert.True(t, ok)
	score1, err := rds.ZScore(key1, members1)
	assert.Nil(t, err)
	assert.Equal(t, 1.0, score1)
	score2, err := rds.ZScore(key1, members3)
	assert.Nil(t, err)
	assert.Equal(t, 2.0, score2)
	ok, err = rds.ZAdd(key1, 2.0, members1)
	assert.Nil(t, err)
	assert.False(t, ok)
	score1, err = rds.ZScore(key1, members1)
	assert.Nil(t, err)
	assert.Equal(t, 2.0, score1)
}
